1. Node.js란?
  1) ~1995년 이전 : HTML + CSS --> 웹사이트 개발
     ~1995년 이후 : HTML + CSS + JAVASCRIPT --> 웹 사이트 개발
  
  2) JAVASCRIPT
    - Netscape에서 개발한 Live Script > Mocha > JavaScript 12월 발표
  
  3) 브라우저에서 지원하는 자바스크립트 엔진
    - Safari : JavaScript Core
    - IE : Chakra
    - Firefox : Spider Monkey
    - Chrome : V8(Just-in-Time compilation)
    - Edage(MS) : Chakra --> 2021년도에 V8 엔진을 탑재함

  4) 2009년 Ryan Dahl이 Node.js 발표
     Deno : TypeScript 런타임 최초 개발자

  5) Node.js는
    '크롬의 V8 엔진을 탑재하고 있는 자바스크립트 런타임 환경이다'

  6) Browser vs Node.js
     Browser => 동적인 웹 애플리케이션 구현 가능
                -------------------------
                WEB API - Windows, Document, Ajax, JSON ... 
    
    Node.js => 서버와 서버 간의 렌더링, 백엔드 서버 구현, 프론트엔드 개발 등 ..
               ---------------------------
               Node API


2. Node.js를 어떻게 공부할 것인가 ?
  1) Node의 구조를 정확히 이해하고 실행방식을 기억한다.
  2) Node에서 제공하는 API를 잘 사용할 줄 알아야 한다.
     API는 자바스크립트 문법으로 작성되었으므로, 문법을 정확히 익히도록 한다.
  3) 개발을 편리하게 지원해주는 프레임워크에 대해 익힌다.
     Node.js --> Express, Rust
     Web API(브라우저) --> React, Vue


3. Node.js 특징 4가지
  1) JavaScript Runtime
    - V8 엔진 탑재 -> ES6, Open API, Node API ...
  2) Single Thread
    - Process vs Thread
    - 노드는 single thread 기반이라 call stack도 하나밖에 없다.
  3) Non-Blocking(비동기적) IO
    - 노드가 single thread라 동기적으로 실행하면 너무 비효율적임 그래서 비동기적으로 실행함
  4) Event - Driven

4. REPL
  R : Read
  E : Eval
  P : Print
  L : Loop

5. console log에 대한 API 검색 및 활용 : 2_console.js 

6. this 정리 - 3_this.js

7. exports/require - node, Blocking

8. Node API
  1) os - 운영체제 정보
  2) Process
  3) Path
  4) FileSystem
  5) Stream & Buffer

9. NPM (Node Package Manager)
  - npmjs.com
  - 노드에서 외부 라이브러리 사용과 프로젝트 관리를 위함
  - 오픈 소스로 제공되며, 천백만명의 개발자들이 사용하는 큰 커뮤니티
    백만개 이상의 라이브러리 존재
  - NPX는 다운로드하여 저장하지 않고, 바로 실행
  - yarn은 페이스북에서 라이브러리 커뮤니티로 npm에서 제기되는 문제점을 해결하고자 만듦
    React에서 주로 사용되며 NPM과 호환이 됨

10. HTTP / HTTPS
  1) HTTP/HTTPS 
    HTTP
    - Hypertext Transfer Protocol
      (request - response Protocol)

             request(URL : http://www.naver.com/index.do)
      client ------------> server
            <------------- 
            response(HTML)
                 |
              데이터를 가로채는 경우 다수 발생
    HTTPS
    - Hypertext Transfer Protocol Secure
      ()

             request(URL : http://www.naver.com/index.do)
      client ------------> server
            <------------- 
            response(HTML)
            : SSL, TSL 등 공개키를 사용한 암호화되어 전송
                 |
              데이터를 가로채는 경우 감소

  2) Status Codes
    - 서버가 클라이언트가 요청한처리상태를 숫자(3자리 숫자, 5개 범위)로 전송하는 코드
      1xx : Informational
            100(Continue) - 요청이 정상적이며, 계속 진행 가능  
            102(Processing) - 요청한 것을 아직 처리 중 

      2xx : Successful
            200(OK) - 성공 메세지
            201(Created) - 클라이언트가 요청한 리소서 생성이 성공함
            204(No Content) - 클라이언트 요청 처리 완료 전송할 컨텐츠는 없음

      3xx : Redirection
            301(Moved Permanently) - 요청한 페이지가 영구적으로 다른 곳으로 이동
            302(Found) - 요청한 페이지가 임시적으로 다른 곳으로 이동 
            303(See Other) - 302와 동일한 의미, 단 GET 방식만 가능

      4xx : Client Error
            400(Bad Request) - 요청한 쿼리가 잘못된 경우
            401(Unauthorized) - 로그인 등 권한이 없는 클라이언트가 요청한 경우
            493(Forbidden) - 로그인한 사용자이지만 특정한 일을 수행할 권한이 없을 때
            404(Not Found)  - URL이 존재하지 않을 때
            405(Method Not Allowed) - 요청한 기능이 허용되지 않을 때

      5xx : Server Error
            500(Internal Server Error) - 서버에서 요청을 처리할 수 없는 경우 전송
            502(Bad Gateway) - 중간에 서버 요청을 어떻게 처리해야할지 모르는 경우 전송
            503(Service Unavailable) - URL에서 요청한 특정한 처리를 하기 위한 준비가 아직 안되어있을 때
  3) Request
    - URL : Uniform Resource Location
    https://www.server.com:80/course/frontend/js/search?a=123
    -----  ------------------ ------------------------- -----
    protocol    hostname        pathname                query(-string)

    - Method : 요청하는 방식(GET / POST / PUT ...)
               GET - get : 서버에서 해당 리소스를 가져오고 싶을 때
               POST - created : URL이 가리키는 곳에 무엇인가를 생성하고 싶을 때,
                                전송하는 데이터의 용량이 큰 경우
               PUT - replace : URL에 있는 데이터를 업데이트 하고 싶을 때
               DELETE - delete : URL에 있는 데이터를 삭제하고 싶을 때
               PATCH - replace partially : 부분적으로 업데이트 하고 싶을 때
               HEAD - get without body : 데이터를 받지는 않고 HEAD만 받고 싶을 때
               OPTIONS - all supported methods for URL
                : 해당 URL에서 사용 가능한 모든 메소드 옵션을 알고 싶을 때
               TRACE - echoes the received request
                : 요청에 대한 서버의 반응 상태를 확인할 때 

    [GET] - 200, 401, 403, 404, 405 .. 
    [POST] - 201, 401, 403, 404, 409 .. 
    [PUT / DELETE / PATCH] - 200, 204, 403, 404,405 
    [HEAD / OPTIONS / TRACE ] - 200, 401, 403, 404, 405

    * GET / HEAD / OPTIONS / TRACE 메소드는 서버의 데이터를 읽기만 진행하고. 데이터의 변경을 요청하는 메소드가 아님

  4) HTTP Headers
  - Stateless Protocol : HTTP는 상태정보를 저장하지 않는 프로토콜이므로 서버에 대한 인증을 필요시 얻어야 함
  - Cookies & Session
            request(get) : http://www.naver.com/login
    Client ------------------------------------------> Server
           <------------------------------------------
              response : 로그인화면(HTML)

            request(post) : 로그인 요청(id, pass)
           ------------------------------------------> Server + DB
           <-----------------------------------------로그인 성공 : Session (key0)
Cookies(Session(key0))
|-----> 브라우저 

11. Node로 서버 생성하기
  1) 간단한 심플한 서버 생성
    템플릿 엔진을 구현한 서버 생성
  2) http 모듈을 이용하여 서버 생성
    http2/https 모듈을 배포시 사용

12. Express
  1) 웹, 모일 서비스를 지원하는 node.js의 서버 라이브러리
     내부적으로 프레임워크 형식이 지원
  2) Express 서버 생성
    - express 설치 : npm i express
    const express = require('express')
    const app = express()
  3) request(요청)
    express_서버.요청메소드('path',콜백함수);
    app.get('/',(req,res)=>{}) // 해당 페이지를 요청

    //post 방식은 body를 통해 데이터 전달, JSON 객체로 생성
    app.use(express.json())
    app.post('/',(req,res)=>{})  

    //put 방식은 데이터 replace 
    app.put('/:id',(req,res)=>{
      const id = req.params.id
    }) 

    //delete 방식은 데이터 delete
    app.delete('/:id',(req,res)=>{
      const id = req.params.id
    })

    4) response(응답)
      res.send(전송할 내용)
      res.sendFile(전송할 내용을 담고있는 파일의 주소를 호출)
      res.sendStatus(status 코드, 전송할 내용)
      res.status(status 코드)

      예 ) / 요청이 오면, Hello 문자를 전송
      app.get('/', (req,res)=>{
        res.send()
      })

      app.get('/',(req,response)=>{
        response.send()
      })

    5) 미들웨어 특징
      - 미들웨어는 작성된 순서에 따라 호출된다. 클라이언트의 요청 주소를 찾기 위해 순서대로 검색하며 실행
      - 미들웨어는 개별적으로 작성할 수도 있고, 체이닝으로 연결하여 작성도 가능
      - 미들웨어의 가장 마지막에는 에러를 처리하는 로직을 작성 (use, all 사용)
    
      * use와 all
      미들웨어 전체적으로 실행되는 메소드를 정의할 때 사용
      use : /path 주소는 하위 모든 주소를 포함하는 개념
      예) app.use('/sky',callback)

      * 미들웨어의 콜백함수는 여러 개 정의가 가능
      app.use('/',
              (req,res,next) => {
                console.log('first')
              },
              (req,res,next) => {
                console.log('second')
              }
              )
    
      * 미들웨어의 콜백함수에서 분기문 사용시 주의점
      app.get('/', (req,res,next)=>{
        console.log('first')
        if(true){
          res.sendStatus(200)
        }
        res.sendStatus(200)
      })